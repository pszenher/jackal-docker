#+TITLE: TODO Items for jackal-docker

* TODO Project Architecture [2/3]

** DONE Spin version pinning scripts off into separate package
   - Should have strong testing coverage with variety of cases for all methods

** TODO Implement unit/integration testing

*** TODO Protect ~master~ branch
    - All changes should come via PRs
    - This should only be done once repo is in stable state

*** DONE Hadolint
    - should lint all dockerfiles and refuse merge upon error

*** DONE Build test Dockerfiles
    - should refuse merge on failure/warinings in build

*** TODO Integration test Docker images
    - should run sanity-checks against built images
    - e.g. invoke ros commands, etc.

** DONE Implement separate repo for building disk from Docker image
*** DONE Create new github repo
    - will be similar in spirit to https://github.com/iximiuz/docker-to-linux
    - commit local scripts
*** DONE Implement CI
*** DONE Integrate with ~jackal-docker~
    - not guaranteed to be necessary, will need to consider the relationship between these repos
* TODO Dockerfile Implementation(s) [1/8]

** DONE GPG Public Key(s)
   - Add personal public key to ssh ~authorized_keys~ for ~rfal~ user
** TODO Networking
*** DONE Fill in ~interfaces~ file
   - Should contain configuration for Velodyne-connected NIC
*** DONE Get real device names
   - Should use device names from jackal ~biosdevname~ (will need to boot physical jackal to test this)
   - eno1, enp2s0, and wlp1s0

** TODO PS4 Controller
*** DONE Check Clearpath PS4 configruation procedure
     - ensure that it is replicated/replaced within Dockerfile environments
*** DONE Get MAC addresses of all PS4 controllers
    - Will require trip to lab
**** Controller MAC Addresses and Info
     Red Controller:
     - MAC: 1C:A0:B8:0D:0F:C3

     Old Black Controller:
     - MAC: DC:0C:2D:71:8D:0C

     New Black Controller:
     - MAC: 1C:A0:B8:EC:04:CB

*** TODO Examine bluetoothctl config
    - Determine if configuration can be saved directly instead of running bluetoothctl commands
    - See https://wiki.archlinux.org/title/bluetooth#Dual_boot_pairing

** TODO Serial access over null-modem cable
   - Should be able to plug-and-play cable in to any Jackal USB port and receive a working terminal promt

*** DONE Test null-modem cable between PC and laptop
    - should find lightweight terminal application for interfacing with serial terminal
      - Server side: ~agetty~ invoked via systemd's ~serial-getty@.service~
      - Client side: ~screen~ or ~picocom~

*** DONE Ensure cable will work out of box on hardware
    - Check for any required software packages/kernel config
      - use ~udev~ rule that matches null modem device

*** TODO Test on Jackal hardware
    - Test use of cable on Jackal

** TODO User catkin workspace
*** DONE Implement catkin_ws config
    - Add empty catking workspace to dockerfile
*** DONE Add RFAL projects to Dockerfile(s)
    - Should include LeGO-LOAM, LIO-SAM, traversability_mapping, la3dm, etc.
*** TODO Add current RFAL projects
    - Ask Frankie for his graph-learning work
    - Ask Erik for his mapping work
*** TODO Fix catkin ws installation
    - Modify each installed package and fix install definitions
    - Could instead install locally to ~/etc/ros/catkin_ws~ and source ~devel/setup.bash~
*** TODO Add non-RFAL projects
    1. TagSLAM

** TODO Other ROS Versions
*** TODO ROS Melodic
   - Implement Dockerfile for ROS Melodic on Ubuntu 18.04

*** TODO ROS Noetic
   - Implement Dockerfile for ROS Noetic on Ubuntu 20.04

*** TODO ROS 2
    - Consider producing Jackal configuration for ROS 2

* TODO Image Export Script(s) [5/9]

** +Remove calls as root user+
   - +should not need to use kernel drivers to mount loopback devices and init an ext4 fs+
   - +look into ~guestmount~+
   - this doesn't work, root is required for copying root-owned files from docker to a ext4 fs

** DONE Enable dynamic sizing of partition table
   - should not rely on hardcoded ~partition-table.conf~
   - check if can be done with ~sfidsk~, otherwise look for other utilities
     - ~fdisk~ can almost certainly accomplish this, but would require the esoteric macro-like syntax wherein the key commands a user would press are used as input

** DONE Refine/remove ~exclude.txt~
   - ideally remove standalone file and roll into inline variable in script(s)
   - check to see if any other directories can be ignored upon docker export

** DONE Restructure ~build-image.sh~ script
   - create functions for each group of actions
   - parse command-line args

** DONE Add support for flashing physical mSata HDD directly
   - should be able to format and write to a physical disk without the itermediate ~raw~ disk image stage

** TODO Implement testing of output image
   - use qemu to sanity check (does image boot, have an init, etc.)
** DONE Reduce unformatted writes to stderr
   - utilities run within the script should have output suppressed when ~debug~ flag is not passed
   - can also format output using ~log~ function if structure is amenable to that
** TODO Implement update function
   - should be able to update an existing image from the same docker image
   - would use a utility like ~rsync~ to copy the filesystem more quickly by preserving unchanged files
   - should be enabled via use of a command line flag
** TODO Cleanup reliance on sudo
   - might be cleaner to require that the script be run as root?
** TODO Handle missing dependencies
*** Current deps:
   Required
   - extlinux (required)

   Optional:
   - pv
   - jq
   - udevadm
*** Consider using docker
    create docker image with deps installed
